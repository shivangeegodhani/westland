<!-- /snippets/collection-filters-sidebar.liquid -->
{% comment %}
  The collection sidebar containing tag filering and link-based navigation

  * collection {object} - The current collection
  * section {object} - The current section

  {% render 'collection-filters-sidebar', section: section, collection: collection %}
{% endcomment %}
{% assign selectedSwatchColor="" %}
 {% assign filterParameter=""%}
  {% assign selectedColor="" %}

{%- liquid
  assign products_count = collection.products_count | default: search.results_count
  assign sort_by_string = ''
  assign filter_layout = section.settings.filter_layout
  assign sort_by = search.sort_by | default: collection.sort_by
  assign string_connector = '?'

  if sort_by != blank
    assign sort_by_string = '?sort_by=' | append: sort_by
    assign string_connector = '&'
  endif

  assign filters_default = search.filters | default: collection.filters
  assign filters_url = request.path | append: sort_by_string

  if template.name == 'search' and search.performed
    assign option_prefix = 'options[prefix]' | url_encode
    assign filters_url = filters_url | append: string_connector | append: 'type=product&' | append: option_prefix | append: '=last&q=' | append: search.terms
  endif

  assign filter_count = 0
  assign filter_active_count = 0
  assign filter_exist = false
-%}

{%- capture filter_clears -%}
  {%- for filter in filters_default -%}
    {%- assign filter_active_count = filter_active_count | plus: filter.active_values.size -%}
    {%- assign filter_exist = true -%}

    {%- if filter.type == "price_range"  -%}
      {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
        {%- assign filter_count = filter_count | plus: 1 -%}
        <a class="active__filters__remove" href="{{ filter.url_to_remove }}" data-filter-update-url>
          <small>
            {%- liquid
              assign min_value = filter.min_value.value | default: 0 | money_without_trailing_zeros
              assign max_value = filter.max_value.value | default: filter.range_max | money_without_trailing_zeros
            -%}
           {{ min_value }} - {{ max_value }}
          </small>
          <span class="filter__x">
            {%- render 'icon-cancel' -%}
          </span>
        </a>
      {%- endif -%}
    {%- else -%}
      {% assign comapreArray = "" %}
      {% assign setColorValue = "" %}
     
        {%- for filter_value in filter.values -%}
          {% assign newSwatchesColor = filter_value.value | split: "-" %}
          {% assign setColorValue = newSwatchesColor[0] | append: ',' | append: setColorValue | upcase | strip %}
          {% assign comapreArray = setColorValue | split: "," | uniq %}
        {%- endfor -%}
    
      {%- assign listOfBasicColor = "Black,Brown,Blue,Red,Grey,Yellow,Beige,Pink,Purple,Green,White,Orange,Metallic" | upcase  -%}
      {%- for filter_value in filter.active_values -%}
        {%- assign filter_count = filter_count | plus: 1 -%}
      {% if  filter_value.param_name == "filter.v.option.colour" %} 
                  {% assign filterParameter=filter_value.param_name %}
                  {% assign selectedSwatchColor=filter_value.label %}
                  {%- assign selectedSwatch = selectedSwatchColor | split: "-" -%}
                  {%- assign checkedSwatchColor = selectedSwatch[0] | strip | upcase -%}
                            {% if listOfBasicColor contains checkedSwatchColor %}
                                  {% assign selectedColor=checkedSwatchColor %}
                            {% else %}
                                  {% assign selectedColor = selectedColor | append: ',' | append: checkedSwatchColor |  strip %}
                            {% endif %}
                    
      {% endif %}
        {% unless filter_value.param_name == "filter.v.option.colour" %}
        {% unless filter_value.label == 'In stock' %}

         <a class="active__filters__remove" href="{{ filter_value.url_to_remove }}" data-filter-update-url>
           <small>{{ filter_value.label }}</small>
          <span class="filter__x">
            {%- render 'icon-cancel' -%}
          </span>
        </a>
        {% endunless %}
      {% endunless %}
      {%- endfor -%}

    {%- endif -%}
  {%- endfor -%}
 
 
  {%- if filterParameter == "filter.v.option.colour" -%}
   <a class="active__filters__remove" style="cursor:pointer;" onclick="removeColorSwatchFilter('{{selectedColor}}')" data-filter-update-url>
  <small> {%-if listOfBasicColor contains selectedColor-%}{{selectedColor | capitalize }}{%-else-%}Mix{%-endif-%}</small>
                <span class="filter__x">
                  {%- render 'icon-cancel' -%}
                </span>
   </a>
   {%- endif -%}
{%- endcapture -%}


<div class="collection__sidebar{% if filter_count > 0 %} collection__sidebar--has-buttons{% endif %}" {% if filter_layout == 'slide-out' %}data-collection-sidebar-slide-out{% else %}data-collection-sidebar-slider{% endif %} data-active-filters-count="{{ filter_active_count }}">
  {%- if filter_count > 0 -%}
    <div class="collection__active__filters">
      {%- if filter_count > 1 -%}
        <a href="{{ filters_url }}" class="active__filters__clear" data-filter-update-url><small>{{ 'collections.general.clear_filters' | t }}</small></a>
      {%- endif -%}
      {{ filter_clears }}
    </div>
  {%- endif -%}

  {%- unless section.settings.collection_linklist == blank or section.settings.collection_linklist.empty? -%}
    {%- assign custom_nav_list = section.settings.collection_linklist | handleize -%}

    <div class="collection__sidebar__group" {{ block.shopify_attributes }}>
      <p class="collection__sidebar__heading is-active" data-collection-sidebar-heading tabindex="0" data-focus-element>
        <span>{{ linklists[custom_nav_list].title }}</span>

        {%- render 'icon-plus' -%}
        {%- render 'icon-minus' -%}
      </p>

      <ul class="collection-nav">
        {%- for link in linklists[custom_nav_list].links -%}
          {%- if link.links == blank -%}
            <li class="sidebar__item {% if link.active %}sidebar__item--active link--remove{% else %}link--add{% endif %}{% if forloop.index > 10 %} is-hidden{% endif %}"{% if forloop.index > 10 %} data-link-hidden{% endif %}>
              <a href="{{ link.url }}">{{ link.title }}</a>
            </li>
          {%- endif -%}
        {%- endfor -%}
      </ul>

      {%- if linklists[custom_nav_list].links.size > 10 -%}
        <div class="collection__sidebar__actions">
          <a href="#" data-show-more class="collection__sidebar__link">
            {%- render 'icon-arrow-separate-vertical' -%}
            {{ 'collections.general.show_more' | t }}
          </a>
        </div>
      {%- endif -%}
    </div>
  {%- endunless -%}

  {%- render 'filters' -%}

  {%- unless filter_exist -%}
    <div class="no-results">
      <p><strong>{{ 'collections.general.no_filters' | t }}</strong></p>
    </div>
  {%- endunless -%}
</div>

<div class="collection__sidebar__buttons">
  {%- if filter_count > 0 -%}
    <a class="btn btn--outline btn--full" href="{{ filters_url }}" data-filter-update-url>
      <span>{{ 'collections.general.reset' | t }}</span>
    </a>
  {%- endif -%}

  {%- if filter_layout == 'slide-out' -%}
    <a
      class="btn btn--full"
      href="#filters-group"
      data-collection-sidebar-close=""
      aria-label="{{ 'collections.general.close_filters' | t }}"
      tabindex="0">
      <span>{{ 'collections.general.view_items_with_count' | t: count: products_count }}</span>
    </a>
  {%- endif -%}
</div>
<script>
    function removeColorSwatchFilter(removeSwatchColor){
    let myColorArr= removeSwatchColor.split(",");
    function removeDuplicates(myColorArr) {
        return myColorArr.filter((item,index) => myColorArr.indexOf(item) === index);
    }
    myColorArr=removeDuplicates(myColorArr);
    myColorArr= myColorArr.filter(n => n)  
     myColorArr.forEach((colorfromCome)=>{  
         let inputList;
         let inputmyList;
         let inputMixColorList;
        inputList=$(`input[value^=${colorfromCome} i]`)
        inputmyList=$("input[value^='myColor']")
        inputMixColorList=$("input[value^='mix']")
        Array.prototype.forEach.call(inputList,(element)=>{
               element.checked = false;
        }) 
        if(inputmyList){
           Array.prototype.forEach.call(inputmyList,(element)=>{
               element.checked = false;
        })
        }
        if(inputMixColorList){    
           Array.prototype.forEach.call(inputMixColorList,(element)=>{
               element.checked = false;
          })
         }
     })
    document.getElementsByClassName("collection__filters")[0].submit();
  }
</script>
